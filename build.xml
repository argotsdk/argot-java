<!--
 Copyright 2003-2007 (c) Live Media Pty Ltd. <argot@einet.com.au> 
 
 This software is licensed under the Argot Public License 
 which may be found in the file LICENSE distributed 
 with this software.
 
 More information about this license can be found at
 http://www.einet.com.au/License
  
 The Developer of this software is Live Media Pty Ltd,
 PO Box 4591, Melbourne 3001, Australia.  The license is subject 
 to the law of Victoria, Australia, and subject to exclusive 
 jurisdiction of the Victorian courts.
-->

<project name="argot" default="package" basedir=".">

	<description>Argot build</description>

	<!-- set global properties for this build -->
	<property name="src" location="src" />
	<property name="test" location="test\src" />
	<property name="lib" location="lib" />
	<property name="build" location="build" />
	<property name="build.bin" location="build\bin" />
	<property name="build.emma" location="build\emma" />
	<property name="build.test" location="build\test" />
	<property name="build.reports" location="build\reports" />
	<property name="dist" location="dist" />
	<property name="release" location="build\release" />

	<property name="base" location="..\.." />
	<property name="argot" location="${base}\argot" />
	<property name="argot-compiler" location="${base}\tools\argot_compiler" />
	
	<property name="emma.dir" value="C:\java\emma-2.0.5312" />

	<path id="emma.lib">
		<pathelement location="${emma.dir}/lib/emma.jar" />
		<pathelement location="${emma.dir}/lib/emma_ant.jar" />
	</path>

	<taskdef resource="emma_ant.properties" classpathref="emma.lib" />

	<path id="compile.classpath">
		<fileset dir="${lib}">
			<include name="**/*.jar" />
		</fileset>
	</path>

	<path id="junit.classpath">
		<pathelement location="${build.bin}" />
		<fileset dir="${lib}">
			<include name="**/*.jar" />
		</fileset>
	</path>
	
	<target name="init">
		<tstamp />
		<mkdir dir="${lib}" />
		<mkdir dir="${build}" />
		<mkdir dir="${build.bin}" />		
		<mkdir dir="${build.test}" />
		<mkdir dir="${build.emma}" />	
		<mkdir dir="${release}" />
	</target>

	<target name="compile" depends="init" description="compile the source">
		<javac 	srcdir="${src}" 
				destdir="${build.bin}" 
				classpathref="compile.classpath" 
				includes="**/*.java" 
				debug="on" 
				optimize="true" 
				deprecation="true" />
	</target>

	<target name="compile-tests" depends="init,compile" description="compile the junit tests">
		<javac 	srcdir="${test}" 
				destdir="${build.test}" 
				classpathref="junit.classpath" 
				includes="**/*.java" 
				debug="on" 
				optimize="true" 
				deprecation="true" />
	</target>

	<target name="emma" description="turns on EMMA instrumentation/reporting">
		<property name="emma.enabled" value="true" />
		<!-- EMMA instr class output directory: -->
		<property name="out.instr.dir" value="${build.emma}" />
		<mkdir dir="${out.instr.dir}" />
	</target>

	<target name="junit-tests" depends="compile-tests" description="run the junit tests">

		<path id="emma.path">
			<pathelement location="${build.bin}" />
		</path>

		<emma enabled="${emma.enabled}">
			<instr instrpathref="emma.path" destdir="${out.instr.dir}" mode="fullcopy" metadatafile="${build.reports}/metadata.emma" merge="true" />
		</emma>

		<junit printsummary="yes" haltonfailure="no" fork="yes" forkmode="once" failureproperty="junit.failure">
			<classpath>
				<pathelement location="${build.emma}\classes" />
				<fileset dir="${lib}">
					<include name="**/*.jar" />
				</fileset>
				<path refid="emma.lib" />
				<pathelement location="${build.test}" />
			</classpath>
			<jvmarg value="-Demma.coverage.out.file=${build.reports}/coverage.emma" />
			<jvmarg value="-Demma.coverage.out.merge=false" />

			<formatter type="plain" />

			<batchtest fork="yes" todir="${build.reports}">
				<fileset dir="test\src">
					<include name="**/*Test.java" />
					<exclude name="**/AllTests.java" />
				</fileset>
			</batchtest>
		</junit>

		<emma enabled="${emma.enabled}">
			<report sourcepath="${src}">
				<fileset dir="${build.reports}">
					<include name="*.emma" />
				</fileset>

				<txt outfile="${build.reports}/coverage.txt" />
				<html outfile="${build.reports}/coverage.html" />
			</report>
		</emma>

		<fail if="junit.failure" message="JUnit tests failed" />
	</target>

	<!--
		If building a system from scratch you can't use the argot
		compiler until Argot is built.  The argot compiler only 
		requires meta.dictionary and common.dictionary which can
		be built by Argot.
	-->
	<target name="argot-compile" depends="compile" description="compiles dictionary files from argot">
		<path id="argotc.lib">
			<pathelement location="${build.bin}"/>
			<pathelement location="${argot-compiler}/release/lib/argot-compiler-1.2.0.jar"/>
		</path>
		<taskdef name="argotc" classname="com.argot.compiler.ant.AntArgotCompiler" classpathref="argotc.lib"/>
		
		<!--
		Build and copy files to build.bin to make them visiable to next argot file. 
		-->
		<argotc input="../argot/meta.argot"/>
		<copy file="../argot/meta.dictionary" todir="${build.bin}/argot" />
		<argotc input="../argot/common.argot"/>
		<copy file="../argot/common.dictionary" todir="${build.bin}/argot" />
		<argotc input="../argot/remote.argot"/>
		<copy file="../argot/remote.dictionary" todir="${build.bin}/argot" />
		<argotc input="../argot/dictionary.argot"/>		
		<argotc input="../argot/netargot.argot"/>		
	</target>
	
	<target name="package" depends="emma,compile,junit-tests,argot-compile" description="generate the distribution release">

		<!-- Put everything in ${build.bin} into the jar file -->
		<copy file="LICENSE.TXT" tofile="${build.bin}/LICENSE.TXT" />
		<mkdir dir="${build.bin}/argot" />
		<copy todir="${build.bin}/argot">
			<fileset dir="../argot">
				<include name="*.dictionary"/>
			</fileset>
		</copy>

		<mkdir dir="${release}/lib" />
		<jar jarfile="${release}/lib/argot-1.2.1.jar" basedir="${build.bin}" />
		<copy file="LICENSE.TXT" tofile="${release}/LICENSE.TXT" />
		<copy file="README.TXT" tofile="${release}/README.TXT" />
		<copy file="BUILD.TXT" tofile="${release}/BUILD.TXT" />
		<copy file="build.xml" tofile="${release}/build.xml" />

		<mkdir dir="${release}/argot" />
		<copy todir="${release}/argot">
			<fileset dir="../argot" />
		</copy>

		<mkdir dir="${release}/doc" />
		<copy file="../doc/ArgotProgrammersGuide.pdf" tofile="${release}/doc/ArgotProgrammersGuide.pdf" />

		<mkdir dir="${release}/examples" />
		<copy todir="${release}/examples">
			<fileset dir="examples" />
		</copy>

		<mkdir dir="${release}/src" />
		<copy todir="${release}/src">
			<fileset dir="src" />
		</copy>

		<mkdir dir="${release}/test" />
		<copy todir="${release}/test">
			<fileset dir="test" />
		</copy>

		<!-- grab the Argot Compiler binary -->
		<mkdir dir="${release}/bin" />
		<copy file="../../tools/argot_compiler/release/bin/ac.bat" tofile="${release}/bin/ac.bat" />
		<copy todir="${release}/lib">
			<fileset dir="../../tools/argot_compiler/release/lib">
				<include name="**/*" />
				<exclude name="argot-?.?.?.jar" />
			</fileset>
		</copy>
		
		<!-- zip up the release -->
		<zip basedir="${release}" destfile="../ArgotJava-1.2.0.zip" />
	</target>

	<target name="clean" description="clean up">
		<delete dir="${bin}" />
		<delete dir="${build}" />
	</target>
</project>
